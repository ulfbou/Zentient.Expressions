name: CI/CD

permissions:
  contents: write

on:
  push:
    branches: [ develop, 'release/*' ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: {}

env:
  SOLUTION: Zentient.Expressions.sln
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_NOLOGO: true

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  ci:
    name: Build & Test (${{ matrix.dotnet-version }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dotnet-version: [ '8.0.x', '9.0.x' ]
    timeout-minutes: 40
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET SDK (matrix)
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet-version }}

      - name: Ensure .NET 9.0.100 installed (satisfy global.json)
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.100

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ matrix.dotnet-version }}-${{ hashFiles('**/*.csproj', '**/Directory.Pack.props', '**/Directory.Build.props') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore ${{ env.SOLUTION }}

      - name: Quick packability validation (non-fatal)
        run: |
          set -euo pipefail
          echo "Checking IsPackable flags (warnings only)"
          missing=0
          for proj in $(git ls-files 'src/**/*.csproj' 'src/*.csproj'); do
            if ! grep -q '<IsPackable>true</IsPackable>' "$proj"; then
              echo "WARNING: $proj missing explicit <IsPackable>true</IsPackable>"
              missing=1
            fi
          done
          for tproj in $(git ls-files 'tests/**/*.csproj' 'tests/*.csproj'); do
            if ! grep -q '<IsPackable>false</IsPackable>' "$tproj"; then
              echo "WARNING: test project $tproj missing explicit <IsPackable>false</IsPackable>"
              missing=1
            fi
          done
          if [ $missing -eq 1 ]; then
            echo "Packability check produced warnings; see repo policy. This does not block CI."
          fi

      - name: Build solution
        run: dotnet build ${{ env.SOLUTION }} --configuration Release --no-restore

      - name: Run tests
        run: dotnet test ${{ env.SOLUTION }} --configuration Release --no-build --logger trx --results-directory tests/TestResults || (echo "Tests failed" && exit 1)

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.dotnet-version }}
          path: tests/TestResults/

  pack:
    name: Pack NuGet Packages
    needs: ci
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET SDK (use 9.0.100 for packing)
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.100

      - name: Also install .NET 8.0 SDK (required to build net8.0 outputs)
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Restore
        run: dotnet restore ${{ env.SOLUTION }}

      - name: Determine package version
        id: pkgver
        run: |
          set -euo pipefail
          echo "DEBUG: determining package version (grep limited to src/)"
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            tag=${GITHUB_REF#refs/tags/}
            ver=${tag#v}
            echo "DEBUG: detected tag -> ver=$ver"
          elif [[ "${{ github.ref }}" == refs/heads/release/* ]]; then
            # Branch-based prerelease, e.g. release/alfa, release/beta, release/rc
            prerelease_label=${GITHUB_REF#refs/heads/release/}
            echo "DEBUG: detected release branch -> label=$prerelease_label"
            # Search only inside src/ for VersionPrefix to avoid matching README/workflow files
            raw=$(grep -R -m1 "<VersionPrefix>" src || true)
            echo "DEBUG: raw grep result: '$raw'"
            if [ -n "$raw" ]; then
              extracted=$(echo "$raw" | sed -E 's/.*<VersionPrefix>([^<]+)<\/VersionPrefix>.*/\1/')
              echo "DEBUG: sed extracted: '$extracted'"
              base="$extracted"
            else
              base="0.0.0"
              echo "DEBUG: no VersionPrefix found in src/, defaulting to $base"
            fi
            shortsha=$(git rev-parse --short=8 HEAD)
            date=$(date -u +%Y%m%d%H%M)
            ver="${base}-${prerelease_label}.ci.${date}.${shortsha}"
            echo "DEBUG: composed prerelease ver=$ver"
          else
            # Search only inside src/ for VersionPrefix to avoid matching README/workflow files
            raw=$(grep -R -m1 "<VersionPrefix>" src || true)
            echo "DEBUG: raw grep result: '$raw'"
            if [ -n "$raw" ]; then
              extracted=$(echo "$raw" | sed -E 's/.*<VersionPrefix>([^<]+)<\/VersionPrefix>.*/\1/')
              echo "DEBUG: sed extracted: '$extracted'"
              ver="$extracted"
            else
              ver="0.0.0"
              echo "DEBUG: no VersionPrefix found in src/, defaulting to $ver"
            fi
            shortsha=$(git rev-parse --short=8 HEAD)
            date=$(date -u +%Y%m%d%H%M)
            ver="${ver}-ci.${date}.${shortsha}"
            echo "DEBUG: composed ver=$ver"
          fi
          ver=$(printf "%s" "$ver" | tr -d '\r')
          echo "$ver" > version.txt
          echo "DEBUG: written version.txt contents:"; cat version.txt

      - name: Create artifacts dir
        run: mkdir -p artifacts

      - name: Build solution for packing
        run: |
          set -euo pipefail
          echo "Building solution before packing to ensure artifacts exist"
          dotnet build ${{ env.SOLUTION }} -c Release

      - name: Pack solution (include symbols and sources)
        run: |
          set -euo pipefail
          ver=$(cat version.txt)
          echo "Packing with PackageVersion=$ver"
          dotnet pack ${{ env.SOLUTION }} -c Release -p:PackageVersion="$ver" --include-symbols --include-source -o artifacts || { echo "Pack failed"; exit 1; }

      - name: Upload NuGet packages as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nuget-packages
          path: artifacts/

  sign-symbols:
    name: Sign symbol packages (optional)
    needs: pack
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: nuget-packages
          path: ./artifacts

      - name: Sign symbols (conditional inside script)
        run: |
          set -euo pipefail
          if [ -z "${{ secrets.SIGNING_KEY }}" ]; then
            echo "No SIGNING_KEY configured; skipping signing steps.";
            exit 0;
          fi
          echo "Signing symbols (placeholder)"
          SIGNING_KEY="${{ secrets.SIGNING_KEY }}"
          # Implement actual signing commands here, using $SIGNING_KEY securely.

  publish:
    name: Publish to NuGet & Create Release
    needs: [ pack, sign-symbols ]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    timeout-minutes: 20
    steps:
      - name: Download package artifacts
        uses: actions/download-artifact@v4
        with:
          name: nuget-packages
          path: ./artifacts

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.100

      - name: Push packages to NuGet.org (packages and symbols)
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        run: |
          set -euo pipefail
          pushed=0
          for pkg in artifacts/*.nupkg; do
            if [ -f "$pkg" ]; then
              dotnet nuget push "$pkg" --api-key "$NUGET_API_KEY" --source https://api.nuget.org/v3/index.json --skip-duplicate || { echo "Failed to push $pkg"; exit 1; }
              pushed=$((pushed+1))
            fi
          done
          for sym in artifacts/*.snupkg; do
            if [ -f "$sym" ]; then
              dotnet nuget push "$sym" --api-key "$NUGET_API_KEY" --source https://api.nuget.org/v3/index.json --skip-duplicate || { echo "Failed to push symbol $sym"; exit 1; }
            fi
          done
          if [ "$pushed" -eq 0 ]; then
            echo "No packages found to push."; exit 1
          fi

      - name: Prepare release assets
        run: |
          set -euo pipefail
          mkdir -p release_assets
          shopt -s nullglob || true
          for pkg in artifacts/*.nupkg; do
            cp "$pkg" release_assets/ || true
          done
          for sym in artifacts/*.snupkg; do
            cp "$sym" release_assets/ || true
          done
          if [ -f CHANGELOG.md ]; then
            cp CHANGELOG.md release_assets/CHANGELOG.md
          else
            echo "Release triggered by $GITHUB_REF" > release_assets/CHANGELOG.md
          fi
          if [ -f LICENSE ]; then
            cp LICENSE release_assets/LICENSE
          else
            echo "MIT License - placeholder" > release_assets/LICENSE
          fi
          for f in src/*/README.md; do
            if [ -f "$f" ]; then cp "$f" release_assets/; fi
          done

      - name: Create GitHub Release and attach artifacts
        uses: softprops/action-gh-release@v2
        with:
          files: |
            release_assets/*
          body_path: release_assets/CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout repository for retry tagging
        if: ${{ failure() }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create and push retry tag
        if: ${{ failure() }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          timestamp=$(date -u +%Y%m%d%H%M%S)
          newtag="v1.0.0-retry.${timestamp}"
          git config user.email "actions@github.com"
          git config user.name "github-actions[bot]"
          git tag -f "$newtag"
          git push --force origin "refs/tags/$newtag"

  publish-prerelease:
    name: Publish Prerelease from release/* (alfa/beta/rc)
    needs: [ pack, sign-symbols ]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/release/')
    timeout-minutes: 20
    steps:
      - name: Download package artifacts
        uses: actions/download-artifact@v4
        with:
          name: nuget-packages
          path: ./artifacts

      - name: Determine version and tag
        run: |
          set -euo pipefail
          ver=$(cat version.txt)
          tag="v${ver}"
          echo "Version=$ver" > release_meta.txt
          echo "Tag=$tag" >> release_meta.txt
          cat release_meta.txt

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.100

      - name: Optionally push prerelease packages to NuGet (if API key configured)
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        run: |
          set -euo pipefail
          if [ -z "${NUGET_API_KEY:-}" ]; then
            echo "No NUGET_API_KEY configured; skipping nuget push for prerelease.";
            exit 0;
          fi
          pushed=0
          for pkg in artifacts/*.nupkg; do
            if [ -f "$pkg" ]; then
              dotnet nuget push "$pkg" --api-key "$NUGET_API_KEY" --source https://api.nuget.org/v3/index.json --skip-duplicate || echo "Failed to push $pkg (non-fatal for prerelease)"
              pushed=$((pushed+1)) || true
            fi
          done
          echo "Pushed $pushed packages (or attempted)."

      - name: Create tag for prerelease
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          git config user.email "actions@github.com"
          git config user.name "github-actions[bot]"
          tag=$(awk -F"=" '/Tag=/ {print $2}' release_meta.txt | tr -d '\r')
          echo "Creating tag $tag"
          git tag -f "$tag" || true
          git push --force origin "refs/tags/$tag" || echo "Failed to push tag (may already exist)"

      - name: Prepare release assets
        run: |
          set -euo pipefail
          mkdir -p release_assets
          shopt -s nullglob || true
          for pkg in artifacts/*.nupkg; do
            cp "$pkg" release_assets/ || true
          done
          for sym in artifacts/*.snupkg; do
            cp "$sym" release_assets/ || true
          done
          if [ -f CHANGELOG.md ]; then
            cp CHANGELOG.md release_assets/CHANGELOG.md
          else
            echo "Prerelease triggered by $GITHUB_REF" > release_assets/CHANGELOG.md
          fi
          if [ -f LICENSE ]; then
            cp LICENSE release_assets/LICENSE
          else
            echo "MIT License - placeholder" > release_assets/LICENSE
          fi
          for f in src/*/README.md; do
            if [ -f "$f" ]; then cp "$f" release_assets/; fi
          done

      - name: Create GitHub prerelease and attach artifacts
        uses: softprops/action-gh-release@v2
        with:
          files: |
            release_assets/*
          body_path: release_assets/CHANGELOG.md
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
